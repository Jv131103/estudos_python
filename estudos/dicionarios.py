"""
üìò DICION√ÅRIOS EM PYTHON

Um **dicion√°rio** (`dict`) √© uma estrutura de dados que armazena pares **chave: valor**.

- √â mut√°vel (voc√™ pode adicionar, modificar e remover elementos).
- As chaves devem ser **hashables** (imut√°veis).
- Os valores podem ser de qualquer tipo.
- Extremamente eficientes para buscas, inser√ß√µes e atualiza√ß√µes.

üîπ Sintaxe b√°sica:
"""

# Criando um dicion√°rio
d = {"nome": "Jo√£o", "idade": 18}

# Acessando valores pela chave
print(d["nome"])     # Jo√£o

# Adicionando novo item
d["cidade"] = "SP"

# Alterando valor existente
d["idade"] = 19

# Removendo item
del d["cidade"]

# Verificando se uma chave existe
if "nome" in d:
    print("Tem nome!")

"""
üîπ Fun√ß√µes e m√©todos importantes:
"""

# Criar dicion√°rio vazio
d = dict()

# Obter valor com fallback padr√£o
print(d.get("chave", "valor padr√£o"))

# Iterar sobre chaves
for chave in d:
    print(chave, d[chave])

# Iterar sobre valores
for valor in d.values():
    print(valor)

# Iterar sobre pares (chave, valor)
for chave, valor in d.items():
    print(chave, valor)

# Remover item e retornar valor
idade = d.pop("idade", None)

# Limpar dicion√°rio
d.clear()

# Copiar dicion√°rio
copia = d.copy()

# setdefault: definir e acessar ao mesmo tempo
# Esse m√©todo busca uma chave e retorna seu valor. Se ela n√£o existir, adiciona
# com um valor padr√£o.
d = {"a": 1}
d.setdefault("a", 0)    # J√° existe, retorna 1
d.setdefault("b", 0)    # N√£o existe, define b = 0
print(d)                # {'a': 1, 'b': 0}

# update: atualizando v√°rios pares ao mesmo tempo
d = {"a": 1}
d.update({"b": 2, "c": 3})
# Tamb√©m funciona com argumentos nomeados:
d.update(d=4, e=5)

# fromkeys: criar dicion√°rio com chaves fixas
# Cria um dicion√°rio com as chaves de uma cole√ß√£o e mesmo valor para todas.
# Cuidado se o valor for mut√°vel, como listas: todas as chaves apontar√£o
# para o mesmo objeto.
chaves = ["a", "b", "c"]
d = dict.fromkeys(chaves, 0)
print(d)  # {'a': 0, 'b': 0, 'c': 0}


# Compara√ß√µes entre dicion√°rios:
# Dicion√°rios podem ser comparados diretamente. Dois dicts s√£o iguais se
# tiverem as mesmas chaves e os mesmos valores (ordem n√£o importa):
a = {"x": 1, "y": 2}
b = {"y": 2, "x": 1}
print(a == b)  # True


"""
üîπ dict e **kwargs em fun√ß√µes

Dicion√°rios podem ser passados como argumentos nomeados usando **.
"""


def apresentar(nome, idade):
    print(f"{nome} tem {idade} anos")


dados = {"nome": "Jo√£o", "idade": 18}
apresentar(**dados)


"""
üîπ Dicion√°rio por compreens√£o (comprehension):
"""

quadrados = {x: x**2 for x in range(5)}
# Resultado: {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}

"""
üîπ Dicion√°rios aninhados:
"""

aluno = {
    "nome": "Jo√£o",
    "notas": {
        "matem√°tica": 9.5,
        "hist√≥ria": 8.0
    }
}

# Acessando nota de matem√°tica
print(aluno["notas"]["matem√°tica"])

"""
üîπ Observa√ß√µes importantes:

‚úîÔ∏è As chaves precisam ser objetos **hashables** (como `int`, `str`, `tuple`, `frozenset`, etc.)
‚ùå Tipos mut√°veis como `list`, `dict` e `set` **n√£o podem** ser usados como chave.
‚úîÔ∏è Dicion√°rios s√£o **n√£o ordenados at√© o Python 3.6**. A partir do Python 3.7, mant√™m a **ordem de inser√ß√£o**.
‚úîÔ∏è Quando voc√™ usa a mesma chave duas vezes, o valor mais recente sobrescreve o anterior.
‚úîÔ∏è Dicion√°rios s√£o extremamente r√°pidos para busca por chave ‚Äî muito mais que listas, por exemplo.
"""

# Exemplo de sobrescrita:
d = {"a": 1, "a": 2}
print(d)  # {'a': 2}

"""
üîπ Como criar dicion√°rios de forma alternativa:
"""

# Usando construtor dict()
d = dict(nome="Jo√£o", idade=20)

# A partir de listas de pares
dados = [("nome", "Jo√£o"), ("idade", 20)]
d = dict(dados)

# Juntando duas listas com zip
chaves = ["nome", "idade"]
valores = ["Jo√£o", 20]
d = dict(zip(chaves, valores))

# Dicion√°rio invertido
d = {"a": 1, "b": 2}
invertido = {v: k for k, v in d.items()}

# Ordenando um dicion√°rio
d = {"c": 3, "a": 1, "b": 2}
ordenado = dict(sorted(d.items()))
print(ordenado)  # {'a': 1, 'b': 2, 'c': 3}

ordenado_por_valor = dict(sorted(d.items(), key=lambda item: item[1]))
print(ordenado_por_valor)

"""
üîπ Dicion√°rio como "switch case"
"""

# N√£o existe switch em Python, mas podemos simular com dicion√°rio de fun√ß√µes:


def soma(a, b):
    return a + b


def sub(a, b):
    return a - b


operacoes = {
    "soma": soma,
    "sub": sub
}

print(operacoes["soma"](5, 3))  # 8
